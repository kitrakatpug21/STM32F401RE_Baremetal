
Timer_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001088  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001088  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000132a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f7  00000000  00000000  000213be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000218b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b8  00000000  00000000  00021b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f46  00000000  00000000  00023bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054ca2  00000000  00000000  00025b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a7e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000adc  00000000  00000000  0007a830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f90 	.word	0x08000f90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08000f90 	.word	0x08000f90

080001d4 <main>:
#include "timer5.h"



int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	timer5_init();
 80001d8:	f000 f8bc 	bl	8000354 <timer5_init>
	uart2_init_transmitter();
 80001dc:	f000 f916 	bl	800040c <uart2_init_transmitter>
	while (1)
	{
		while ((TIM5->SR & (1U<<0)) == 0);
 80001e0:	bf00      	nop
 80001e2:	4b08      	ldr	r3, [pc, #32]	; (8000204 <main+0x30>)
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f003 0301 	and.w	r3, r3, #1
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f9      	beq.n	80001e2 <main+0xe>
		TIM5->SR |= (1U<<0);
 80001ee:	4b05      	ldr	r3, [pc, #20]	; (8000204 <main+0x30>)
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	4a04      	ldr	r2, [pc, #16]	; (8000204 <main+0x30>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6113      	str	r3, [r2, #16]
		printf("TICK Occured\r\n");
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x34>)
 80001fc:	f000 fa38 	bl	8000670 <puts>
		while ((TIM5->SR & (1U<<0)) == 0);
 8000200:	e7ee      	b.n	80001e0 <main+0xc>
 8000202:	bf00      	nop
 8000204:	40000c00 	.word	0x40000c00
 8000208:	08000fa8 	.word	0x08000fa8

0800020c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	e00a      	b.n	8000234 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800021e:	f3af 8000 	nop.w
 8000222:	4601      	mov	r1, r0
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	60ba      	str	r2, [r7, #8]
 800022a:	b2ca      	uxtb	r2, r1
 800022c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022e:	697b      	ldr	r3, [r7, #20]
 8000230:	3301      	adds	r3, #1
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	697a      	ldr	r2, [r7, #20]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	429a      	cmp	r2, r3
 800023a:	dbf0      	blt.n	800021e <_read+0x12>
	}

return len;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}

08000246 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b086      	sub	sp, #24
 800024a:	af00      	add	r7, sp, #0
 800024c:	60f8      	str	r0, [r7, #12]
 800024e:	60b9      	str	r1, [r7, #8]
 8000250:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e009      	b.n	800026c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	1c5a      	adds	r2, r3, #1
 800025c:	60ba      	str	r2, [r7, #8]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f92d 	bl	80004c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	3301      	adds	r3, #1
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	429a      	cmp	r2, r3
 8000272:	dbf1      	blt.n	8000258 <_write+0x12>
	}
	return len;
 8000274:	687b      	ldr	r3, [r7, #4]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <_close>:

int _close(int file)
{
 800027e:	b480      	push	{r7}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
	return -1;
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002a6:	605a      	str	r2, [r3, #4]
	return 0;
 80002a8:	2300      	movs	r3, #0
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <_isatty>:

int _isatty(int file)
{
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
	return 1;
 80002be:	2301      	movs	r3, #1
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
	return 0;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002f0:	4a14      	ldr	r2, [pc, #80]	; (8000344 <_sbrk+0x5c>)
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <_sbrk+0x60>)
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <_sbrk+0x64>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d102      	bne.n	800030a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <_sbrk+0x64>)
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <_sbrk+0x68>)
 8000308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <_sbrk+0x64>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	429a      	cmp	r2, r3
 8000316:	d207      	bcs.n	8000328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000318:	f000 f90a 	bl	8000530 <__errno>
 800031c:	4603      	mov	r3, r0
 800031e:	220c      	movs	r2, #12
 8000320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000322:	f04f 33ff 	mov.w	r3, #4294967295
 8000326:	e009      	b.n	800033c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <_sbrk+0x64>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <_sbrk+0x64>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <_sbrk+0x64>)
 8000338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800033a:	68fb      	ldr	r3, [r7, #12]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3718      	adds	r7, #24
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20018000 	.word	0x20018000
 8000348:	00000400 	.word	0x00000400
 800034c:	20000080 	.word	0x20000080
 8000350:	20000098 	.word	0x20000098

08000354 <timer5_init>:
 */

#include <timer5.h>

void timer5_init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	// enable clocks for GPIOA and TIMER5
	RCC -> AHB1ENR |= (1U<<0);
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <timer5_init+0xac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a28      	ldr	r2, [pc, #160]	; (8000400 <timer5_init+0xac>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> APB1ENR |= (1U<<3);
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <timer5_init+0xac>)
 8000366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000368:	4a25      	ldr	r2, [pc, #148]	; (8000400 <timer5_init+0xac>)
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	6413      	str	r3, [r2, #64]	; 0x40

	// Set GPIOA PA0 mode to Alternate Func Mode
	GPIOA -> MODER |= (1U<<1);
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <timer5_init+0xb0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <timer5_init+0xb0>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<0);
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <timer5_init+0xb0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a20      	ldr	r2, [pc, #128]	; (8000404 <timer5_init+0xb0>)
 8000382:	f023 0301 	bic.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]

	// SET PA0 to AF02
	GPIOA -> AFR[0] |= (1U<<1);
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <timer5_init+0xb0>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <timer5_init+0xb0>)
 800038e:	f043 0302 	orr.w	r3, r3, #2
 8000392:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U<<0);
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <timer5_init+0xb0>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a1a      	ldr	r2, [pc, #104]	; (8000404 <timer5_init+0xb0>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U<<0);
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <timer5_init+0xb0>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a17      	ldr	r2, [pc, #92]	; (8000404 <timer5_init+0xb0>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U<<0);
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <timer5_init+0xb0>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a14      	ldr	r2, [pc, #80]	; (8000404 <timer5_init+0xb0>)
 80003b2:	f023 0301 	bic.w	r3, r3, #1
 80003b6:	6213      	str	r3, [r2, #32]

	// Diable the timer 5 for changes
	TIM5 -> CR1 &= ~(1<<0);
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <timer5_init+0xb4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <timer5_init+0xb4>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]

	//COUNTER - 1000
	TIM5 -> ARR = 8000 - 1;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <timer5_init+0xb4>)
 80003c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c

	//prescale FREQ/10
	TIM5 -> PSC = 10 -1;
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <timer5_init+0xb4>)
 80003ce:	2209      	movs	r2, #9
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28

	//
	TIM5 -> CCMR1 |= (1U<<5)|(1U<<4);
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <timer5_init+0xb4>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <timer5_init+0xb4>)
 80003d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003dc:	6193      	str	r3, [r2, #24]

	TIM5 -> CCER |= (1U<<0);
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <timer5_init+0xb4>)
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	4a09      	ldr	r2, [pc, #36]	; (8000408 <timer5_init+0xb4>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6213      	str	r3, [r2, #32]

	// Enable the timer 5 for changes
	TIM5 -> CR1 |= (1<<0);
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <timer5_init+0xb4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a06      	ldr	r2, [pc, #24]	; (8000408 <timer5_init+0xb4>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40023800 	.word	0x40023800
 8000404:	40020000 	.word	0x40020000
 8000408:	40000c00 	.word	0x40000c00

0800040c <uart2_init_transmitter>:

#define GPIOAEN		(1U << 0)
#define USART2EN	(1U << 17)

void uart2_init_transmitter(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	/*ENABLE THE AHB and APB Buses*/
	RCC -> AHB1ENR |= GPIOAEN;
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <uart2_init_transmitter+0x78>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <uart2_init_transmitter+0x78>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> APB1ENR |= USART2EN;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <uart2_init_transmitter+0x78>)
 800041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <uart2_init_transmitter+0x78>)
 8000422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000426:	6413      	str	r3, [r2, #64]	; 0x40

	/*GPIOA Mode Setup*/
	GPIOA -> MODER |= (1U<<5);
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <uart2_init_transmitter+0x7c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <uart2_init_transmitter+0x7c>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U<<4);
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <uart2_init_transmitter+0x7c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a13      	ldr	r2, [pc, #76]	; (8000488 <uart2_init_transmitter+0x7c>)
 800043a:	f023 0310 	bic.w	r3, r3, #16
 800043e:	6013      	str	r3, [r2, #0]

	/*GPIOA Alternate Functionality Mode Setup*/
	GPIOA -> AFR[0] |= (1U << 8)|(1U<<9)|(1U<<10);
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <uart2_init_transmitter+0x7c>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <uart2_init_transmitter+0x7c>)
 8000446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800044a:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U<<11);
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <uart2_init_transmitter+0x7c>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <uart2_init_transmitter+0x7c>)
 8000452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000456:	6213      	str	r3, [r2, #32]

	/* USART BAUD Rate SETUP */
	USART2 -> BRR = ((0x0068<<4) + 0x0003);// 9600 Baud Setup
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <uart2_init_transmitter+0x80>)
 800045a:	f240 6283 	movw	r2, #1667	; 0x683
 800045e:	609a      	str	r2, [r3, #8]

	/* USART CR1 Setup */
	USART2 -> CR1 |= (1<<3);//TE
 8000460:	4b0a      	ldr	r3, [pc, #40]	; (800048c <uart2_init_transmitter+0x80>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a09      	ldr	r2, [pc, #36]	; (800048c <uart2_init_transmitter+0x80>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	60d3      	str	r3, [r2, #12]

	//USART2 -> ////// PARITY

	/*ENABLE THE USART PROTOCOL*/
	USART2 -> CR1 |= (1U<<13); // USART ENABLE
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <uart2_init_transmitter+0x80>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a06      	ldr	r2, [pc, #24]	; (800048c <uart2_init_transmitter+0x80>)
 8000472:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000476:	60d3      	str	r3, [r2, #12]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40020000 	.word	0x40020000
 800048c:	40004400 	.word	0x40004400

08000490 <uart2_transmit>:
	/*ENABLE THE USART PROTOCOL*/
	USART2 -> CR1 |= (1U<<13); // USART ENABLE
}

void uart2_transmit(char ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	USART2 -> DR = ch;
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <uart2_transmit+0x2c>)
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	6053      	str	r3, [r2, #4]
	//load the data
	while(!(USART2 -> SR & (1U<<7)));
 80004a0:	bf00      	nop
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <uart2_transmit+0x2c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <uart2_transmit+0x12>
	// wait till transmission is pending
}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40004400 	.word	0x40004400

080004c0 <__io_putchar>:
	return (USART2 -> DR);
	//return the data
}

int __io_putchar(int ch)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uart2_transmit(ch);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ffdf 	bl	8000490 <uart2_transmit>
	return ch;
 80004d2:	687b      	ldr	r3, [r7, #4]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	; (800051c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <LoopForever+0xe>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <LoopForever+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050a:	f000 f817 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe61 	bl	80001d4 <main>

08000512 <LoopForever>:

LoopForever:
    b LoopForever
 8000512:	e7fe      	b.n	8000512 <LoopForever>
  ldr   r0, =_estack
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000520:	08001024 	.word	0x08001024
  ldr r2, =_sbss
 8000524:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000528:	20000094 	.word	0x20000094

0800052c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <__errno>:
 8000530:	4b01      	ldr	r3, [pc, #4]	; (8000538 <__errno+0x8>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	4d0d      	ldr	r5, [pc, #52]	; (8000574 <__libc_init_array+0x38>)
 8000540:	4c0d      	ldr	r4, [pc, #52]	; (8000578 <__libc_init_array+0x3c>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	2600      	movs	r6, #0
 8000548:	42a6      	cmp	r6, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	4d0b      	ldr	r5, [pc, #44]	; (800057c <__libc_init_array+0x40>)
 800054e:	4c0c      	ldr	r4, [pc, #48]	; (8000580 <__libc_init_array+0x44>)
 8000550:	f000 fd1e 	bl	8000f90 <_init>
 8000554:	1b64      	subs	r4, r4, r5
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	2600      	movs	r6, #0
 800055a:	42a6      	cmp	r6, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f855 3b04 	ldr.w	r3, [r5], #4
 8000564:	4798      	blx	r3
 8000566:	3601      	adds	r6, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f855 3b04 	ldr.w	r3, [r5], #4
 800056e:	4798      	blx	r3
 8000570:	3601      	adds	r6, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800101c 	.word	0x0800101c
 8000578:	0800101c 	.word	0x0800101c
 800057c:	0800101c 	.word	0x0800101c
 8000580:	08001020 	.word	0x08001020

08000584 <memset>:
 8000584:	4402      	add	r2, r0
 8000586:	4603      	mov	r3, r0
 8000588:	4293      	cmp	r3, r2
 800058a:	d100      	bne.n	800058e <memset+0xa>
 800058c:	4770      	bx	lr
 800058e:	f803 1b01 	strb.w	r1, [r3], #1
 8000592:	e7f9      	b.n	8000588 <memset+0x4>

08000594 <_puts_r>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	460e      	mov	r6, r1
 8000598:	4605      	mov	r5, r0
 800059a:	b118      	cbz	r0, 80005a4 <_puts_r+0x10>
 800059c:	6983      	ldr	r3, [r0, #24]
 800059e:	b90b      	cbnz	r3, 80005a4 <_puts_r+0x10>
 80005a0:	f000 fa48 	bl	8000a34 <__sinit>
 80005a4:	69ab      	ldr	r3, [r5, #24]
 80005a6:	68ac      	ldr	r4, [r5, #8]
 80005a8:	b913      	cbnz	r3, 80005b0 <_puts_r+0x1c>
 80005aa:	4628      	mov	r0, r5
 80005ac:	f000 fa42 	bl	8000a34 <__sinit>
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <_puts_r+0xd0>)
 80005b2:	429c      	cmp	r4, r3
 80005b4:	d120      	bne.n	80005f8 <_puts_r+0x64>
 80005b6:	686c      	ldr	r4, [r5, #4]
 80005b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005ba:	07db      	lsls	r3, r3, #31
 80005bc:	d405      	bmi.n	80005ca <_puts_r+0x36>
 80005be:	89a3      	ldrh	r3, [r4, #12]
 80005c0:	0598      	lsls	r0, r3, #22
 80005c2:	d402      	bmi.n	80005ca <_puts_r+0x36>
 80005c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005c6:	f000 fad3 	bl	8000b70 <__retarget_lock_acquire_recursive>
 80005ca:	89a3      	ldrh	r3, [r4, #12]
 80005cc:	0719      	lsls	r1, r3, #28
 80005ce:	d51d      	bpl.n	800060c <_puts_r+0x78>
 80005d0:	6923      	ldr	r3, [r4, #16]
 80005d2:	b1db      	cbz	r3, 800060c <_puts_r+0x78>
 80005d4:	3e01      	subs	r6, #1
 80005d6:	68a3      	ldr	r3, [r4, #8]
 80005d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005dc:	3b01      	subs	r3, #1
 80005de:	60a3      	str	r3, [r4, #8]
 80005e0:	bb39      	cbnz	r1, 8000632 <_puts_r+0x9e>
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	da38      	bge.n	8000658 <_puts_r+0xc4>
 80005e6:	4622      	mov	r2, r4
 80005e8:	210a      	movs	r1, #10
 80005ea:	4628      	mov	r0, r5
 80005ec:	f000 f848 	bl	8000680 <__swbuf_r>
 80005f0:	3001      	adds	r0, #1
 80005f2:	d011      	beq.n	8000618 <_puts_r+0x84>
 80005f4:	250a      	movs	r5, #10
 80005f6:	e011      	b.n	800061c <_puts_r+0x88>
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <_puts_r+0xd4>)
 80005fa:	429c      	cmp	r4, r3
 80005fc:	d101      	bne.n	8000602 <_puts_r+0x6e>
 80005fe:	68ac      	ldr	r4, [r5, #8]
 8000600:	e7da      	b.n	80005b8 <_puts_r+0x24>
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <_puts_r+0xd8>)
 8000604:	429c      	cmp	r4, r3
 8000606:	bf08      	it	eq
 8000608:	68ec      	ldreq	r4, [r5, #12]
 800060a:	e7d5      	b.n	80005b8 <_puts_r+0x24>
 800060c:	4621      	mov	r1, r4
 800060e:	4628      	mov	r0, r5
 8000610:	f000 f888 	bl	8000724 <__swsetup_r>
 8000614:	2800      	cmp	r0, #0
 8000616:	d0dd      	beq.n	80005d4 <_puts_r+0x40>
 8000618:	f04f 35ff 	mov.w	r5, #4294967295
 800061c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800061e:	07da      	lsls	r2, r3, #31
 8000620:	d405      	bmi.n	800062e <_puts_r+0x9a>
 8000622:	89a3      	ldrh	r3, [r4, #12]
 8000624:	059b      	lsls	r3, r3, #22
 8000626:	d402      	bmi.n	800062e <_puts_r+0x9a>
 8000628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800062a:	f000 faa2 	bl	8000b72 <__retarget_lock_release_recursive>
 800062e:	4628      	mov	r0, r5
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	2b00      	cmp	r3, #0
 8000634:	da04      	bge.n	8000640 <_puts_r+0xac>
 8000636:	69a2      	ldr	r2, [r4, #24]
 8000638:	429a      	cmp	r2, r3
 800063a:	dc06      	bgt.n	800064a <_puts_r+0xb6>
 800063c:	290a      	cmp	r1, #10
 800063e:	d004      	beq.n	800064a <_puts_r+0xb6>
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	6022      	str	r2, [r4, #0]
 8000646:	7019      	strb	r1, [r3, #0]
 8000648:	e7c5      	b.n	80005d6 <_puts_r+0x42>
 800064a:	4622      	mov	r2, r4
 800064c:	4628      	mov	r0, r5
 800064e:	f000 f817 	bl	8000680 <__swbuf_r>
 8000652:	3001      	adds	r0, #1
 8000654:	d1bf      	bne.n	80005d6 <_puts_r+0x42>
 8000656:	e7df      	b.n	8000618 <_puts_r+0x84>
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	250a      	movs	r5, #10
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	6022      	str	r2, [r4, #0]
 8000660:	701d      	strb	r5, [r3, #0]
 8000662:	e7db      	b.n	800061c <_puts_r+0x88>
 8000664:	08000fdc 	.word	0x08000fdc
 8000668:	08000ffc 	.word	0x08000ffc
 800066c:	08000fbc 	.word	0x08000fbc

08000670 <puts>:
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <puts+0xc>)
 8000672:	4601      	mov	r1, r0
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	f7ff bf8d 	b.w	8000594 <_puts_r>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000

08000680 <__swbuf_r>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	460e      	mov	r6, r1
 8000684:	4614      	mov	r4, r2
 8000686:	4605      	mov	r5, r0
 8000688:	b118      	cbz	r0, 8000692 <__swbuf_r+0x12>
 800068a:	6983      	ldr	r3, [r0, #24]
 800068c:	b90b      	cbnz	r3, 8000692 <__swbuf_r+0x12>
 800068e:	f000 f9d1 	bl	8000a34 <__sinit>
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <__swbuf_r+0x98>)
 8000694:	429c      	cmp	r4, r3
 8000696:	d12b      	bne.n	80006f0 <__swbuf_r+0x70>
 8000698:	686c      	ldr	r4, [r5, #4]
 800069a:	69a3      	ldr	r3, [r4, #24]
 800069c:	60a3      	str	r3, [r4, #8]
 800069e:	89a3      	ldrh	r3, [r4, #12]
 80006a0:	071a      	lsls	r2, r3, #28
 80006a2:	d52f      	bpl.n	8000704 <__swbuf_r+0x84>
 80006a4:	6923      	ldr	r3, [r4, #16]
 80006a6:	b36b      	cbz	r3, 8000704 <__swbuf_r+0x84>
 80006a8:	6923      	ldr	r3, [r4, #16]
 80006aa:	6820      	ldr	r0, [r4, #0]
 80006ac:	1ac0      	subs	r0, r0, r3
 80006ae:	6963      	ldr	r3, [r4, #20]
 80006b0:	b2f6      	uxtb	r6, r6
 80006b2:	4283      	cmp	r3, r0
 80006b4:	4637      	mov	r7, r6
 80006b6:	dc04      	bgt.n	80006c2 <__swbuf_r+0x42>
 80006b8:	4621      	mov	r1, r4
 80006ba:	4628      	mov	r0, r5
 80006bc:	f000 f926 	bl	800090c <_fflush_r>
 80006c0:	bb30      	cbnz	r0, 8000710 <__swbuf_r+0x90>
 80006c2:	68a3      	ldr	r3, [r4, #8]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	60a3      	str	r3, [r4, #8]
 80006c8:	6823      	ldr	r3, [r4, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	6022      	str	r2, [r4, #0]
 80006ce:	701e      	strb	r6, [r3, #0]
 80006d0:	6963      	ldr	r3, [r4, #20]
 80006d2:	3001      	adds	r0, #1
 80006d4:	4283      	cmp	r3, r0
 80006d6:	d004      	beq.n	80006e2 <__swbuf_r+0x62>
 80006d8:	89a3      	ldrh	r3, [r4, #12]
 80006da:	07db      	lsls	r3, r3, #31
 80006dc:	d506      	bpl.n	80006ec <__swbuf_r+0x6c>
 80006de:	2e0a      	cmp	r6, #10
 80006e0:	d104      	bne.n	80006ec <__swbuf_r+0x6c>
 80006e2:	4621      	mov	r1, r4
 80006e4:	4628      	mov	r0, r5
 80006e6:	f000 f911 	bl	800090c <_fflush_r>
 80006ea:	b988      	cbnz	r0, 8000710 <__swbuf_r+0x90>
 80006ec:	4638      	mov	r0, r7
 80006ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <__swbuf_r+0x9c>)
 80006f2:	429c      	cmp	r4, r3
 80006f4:	d101      	bne.n	80006fa <__swbuf_r+0x7a>
 80006f6:	68ac      	ldr	r4, [r5, #8]
 80006f8:	e7cf      	b.n	800069a <__swbuf_r+0x1a>
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <__swbuf_r+0xa0>)
 80006fc:	429c      	cmp	r4, r3
 80006fe:	bf08      	it	eq
 8000700:	68ec      	ldreq	r4, [r5, #12]
 8000702:	e7ca      	b.n	800069a <__swbuf_r+0x1a>
 8000704:	4621      	mov	r1, r4
 8000706:	4628      	mov	r0, r5
 8000708:	f000 f80c 	bl	8000724 <__swsetup_r>
 800070c:	2800      	cmp	r0, #0
 800070e:	d0cb      	beq.n	80006a8 <__swbuf_r+0x28>
 8000710:	f04f 37ff 	mov.w	r7, #4294967295
 8000714:	e7ea      	b.n	80006ec <__swbuf_r+0x6c>
 8000716:	bf00      	nop
 8000718:	08000fdc 	.word	0x08000fdc
 800071c:	08000ffc 	.word	0x08000ffc
 8000720:	08000fbc 	.word	0x08000fbc

08000724 <__swsetup_r>:
 8000724:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <__swsetup_r+0xcc>)
 8000726:	b570      	push	{r4, r5, r6, lr}
 8000728:	681d      	ldr	r5, [r3, #0]
 800072a:	4606      	mov	r6, r0
 800072c:	460c      	mov	r4, r1
 800072e:	b125      	cbz	r5, 800073a <__swsetup_r+0x16>
 8000730:	69ab      	ldr	r3, [r5, #24]
 8000732:	b913      	cbnz	r3, 800073a <__swsetup_r+0x16>
 8000734:	4628      	mov	r0, r5
 8000736:	f000 f97d 	bl	8000a34 <__sinit>
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <__swsetup_r+0xd0>)
 800073c:	429c      	cmp	r4, r3
 800073e:	d10f      	bne.n	8000760 <__swsetup_r+0x3c>
 8000740:	686c      	ldr	r4, [r5, #4]
 8000742:	89a3      	ldrh	r3, [r4, #12]
 8000744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000748:	0719      	lsls	r1, r3, #28
 800074a:	d42c      	bmi.n	80007a6 <__swsetup_r+0x82>
 800074c:	06dd      	lsls	r5, r3, #27
 800074e:	d411      	bmi.n	8000774 <__swsetup_r+0x50>
 8000750:	2309      	movs	r3, #9
 8000752:	6033      	str	r3, [r6, #0]
 8000754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000758:	81a3      	strh	r3, [r4, #12]
 800075a:	f04f 30ff 	mov.w	r0, #4294967295
 800075e:	e03e      	b.n	80007de <__swsetup_r+0xba>
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <__swsetup_r+0xd4>)
 8000762:	429c      	cmp	r4, r3
 8000764:	d101      	bne.n	800076a <__swsetup_r+0x46>
 8000766:	68ac      	ldr	r4, [r5, #8]
 8000768:	e7eb      	b.n	8000742 <__swsetup_r+0x1e>
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <__swsetup_r+0xd8>)
 800076c:	429c      	cmp	r4, r3
 800076e:	bf08      	it	eq
 8000770:	68ec      	ldreq	r4, [r5, #12]
 8000772:	e7e6      	b.n	8000742 <__swsetup_r+0x1e>
 8000774:	0758      	lsls	r0, r3, #29
 8000776:	d512      	bpl.n	800079e <__swsetup_r+0x7a>
 8000778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800077a:	b141      	cbz	r1, 800078e <__swsetup_r+0x6a>
 800077c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000780:	4299      	cmp	r1, r3
 8000782:	d002      	beq.n	800078a <__swsetup_r+0x66>
 8000784:	4630      	mov	r0, r6
 8000786:	f000 fa5b 	bl	8000c40 <_free_r>
 800078a:	2300      	movs	r3, #0
 800078c:	6363      	str	r3, [r4, #52]	; 0x34
 800078e:	89a3      	ldrh	r3, [r4, #12]
 8000790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000794:	81a3      	strh	r3, [r4, #12]
 8000796:	2300      	movs	r3, #0
 8000798:	6063      	str	r3, [r4, #4]
 800079a:	6923      	ldr	r3, [r4, #16]
 800079c:	6023      	str	r3, [r4, #0]
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	81a3      	strh	r3, [r4, #12]
 80007a6:	6923      	ldr	r3, [r4, #16]
 80007a8:	b94b      	cbnz	r3, 80007be <__swsetup_r+0x9a>
 80007aa:	89a3      	ldrh	r3, [r4, #12]
 80007ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80007b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007b4:	d003      	beq.n	80007be <__swsetup_r+0x9a>
 80007b6:	4621      	mov	r1, r4
 80007b8:	4630      	mov	r0, r6
 80007ba:	f000 fa01 	bl	8000bc0 <__smakebuf_r>
 80007be:	89a0      	ldrh	r0, [r4, #12]
 80007c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007c4:	f010 0301 	ands.w	r3, r0, #1
 80007c8:	d00a      	beq.n	80007e0 <__swsetup_r+0xbc>
 80007ca:	2300      	movs	r3, #0
 80007cc:	60a3      	str	r3, [r4, #8]
 80007ce:	6963      	ldr	r3, [r4, #20]
 80007d0:	425b      	negs	r3, r3
 80007d2:	61a3      	str	r3, [r4, #24]
 80007d4:	6923      	ldr	r3, [r4, #16]
 80007d6:	b943      	cbnz	r3, 80007ea <__swsetup_r+0xc6>
 80007d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80007dc:	d1ba      	bne.n	8000754 <__swsetup_r+0x30>
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	0781      	lsls	r1, r0, #30
 80007e2:	bf58      	it	pl
 80007e4:	6963      	ldrpl	r3, [r4, #20]
 80007e6:	60a3      	str	r3, [r4, #8]
 80007e8:	e7f4      	b.n	80007d4 <__swsetup_r+0xb0>
 80007ea:	2000      	movs	r0, #0
 80007ec:	e7f7      	b.n	80007de <__swsetup_r+0xba>
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08000fdc 	.word	0x08000fdc
 80007f8:	08000ffc 	.word	0x08000ffc
 80007fc:	08000fbc 	.word	0x08000fbc

08000800 <__sflush_r>:
 8000800:	898a      	ldrh	r2, [r1, #12]
 8000802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000806:	4605      	mov	r5, r0
 8000808:	0710      	lsls	r0, r2, #28
 800080a:	460c      	mov	r4, r1
 800080c:	d458      	bmi.n	80008c0 <__sflush_r+0xc0>
 800080e:	684b      	ldr	r3, [r1, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dc05      	bgt.n	8000820 <__sflush_r+0x20>
 8000814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000816:	2b00      	cmp	r3, #0
 8000818:	dc02      	bgt.n	8000820 <__sflush_r+0x20>
 800081a:	2000      	movs	r0, #0
 800081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000822:	2e00      	cmp	r6, #0
 8000824:	d0f9      	beq.n	800081a <__sflush_r+0x1a>
 8000826:	2300      	movs	r3, #0
 8000828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800082c:	682f      	ldr	r7, [r5, #0]
 800082e:	602b      	str	r3, [r5, #0]
 8000830:	d032      	beq.n	8000898 <__sflush_r+0x98>
 8000832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000834:	89a3      	ldrh	r3, [r4, #12]
 8000836:	075a      	lsls	r2, r3, #29
 8000838:	d505      	bpl.n	8000846 <__sflush_r+0x46>
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	1ac0      	subs	r0, r0, r3
 800083e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000840:	b10b      	cbz	r3, 8000846 <__sflush_r+0x46>
 8000842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000844:	1ac0      	subs	r0, r0, r3
 8000846:	2300      	movs	r3, #0
 8000848:	4602      	mov	r2, r0
 800084a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800084c:	6a21      	ldr	r1, [r4, #32]
 800084e:	4628      	mov	r0, r5
 8000850:	47b0      	blx	r6
 8000852:	1c43      	adds	r3, r0, #1
 8000854:	89a3      	ldrh	r3, [r4, #12]
 8000856:	d106      	bne.n	8000866 <__sflush_r+0x66>
 8000858:	6829      	ldr	r1, [r5, #0]
 800085a:	291d      	cmp	r1, #29
 800085c:	d82c      	bhi.n	80008b8 <__sflush_r+0xb8>
 800085e:	4a2a      	ldr	r2, [pc, #168]	; (8000908 <__sflush_r+0x108>)
 8000860:	40ca      	lsrs	r2, r1
 8000862:	07d6      	lsls	r6, r2, #31
 8000864:	d528      	bpl.n	80008b8 <__sflush_r+0xb8>
 8000866:	2200      	movs	r2, #0
 8000868:	6062      	str	r2, [r4, #4]
 800086a:	04d9      	lsls	r1, r3, #19
 800086c:	6922      	ldr	r2, [r4, #16]
 800086e:	6022      	str	r2, [r4, #0]
 8000870:	d504      	bpl.n	800087c <__sflush_r+0x7c>
 8000872:	1c42      	adds	r2, r0, #1
 8000874:	d101      	bne.n	800087a <__sflush_r+0x7a>
 8000876:	682b      	ldr	r3, [r5, #0]
 8000878:	b903      	cbnz	r3, 800087c <__sflush_r+0x7c>
 800087a:	6560      	str	r0, [r4, #84]	; 0x54
 800087c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800087e:	602f      	str	r7, [r5, #0]
 8000880:	2900      	cmp	r1, #0
 8000882:	d0ca      	beq.n	800081a <__sflush_r+0x1a>
 8000884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000888:	4299      	cmp	r1, r3
 800088a:	d002      	beq.n	8000892 <__sflush_r+0x92>
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f9d7 	bl	8000c40 <_free_r>
 8000892:	2000      	movs	r0, #0
 8000894:	6360      	str	r0, [r4, #52]	; 0x34
 8000896:	e7c1      	b.n	800081c <__sflush_r+0x1c>
 8000898:	6a21      	ldr	r1, [r4, #32]
 800089a:	2301      	movs	r3, #1
 800089c:	4628      	mov	r0, r5
 800089e:	47b0      	blx	r6
 80008a0:	1c41      	adds	r1, r0, #1
 80008a2:	d1c7      	bne.n	8000834 <__sflush_r+0x34>
 80008a4:	682b      	ldr	r3, [r5, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0c4      	beq.n	8000834 <__sflush_r+0x34>
 80008aa:	2b1d      	cmp	r3, #29
 80008ac:	d001      	beq.n	80008b2 <__sflush_r+0xb2>
 80008ae:	2b16      	cmp	r3, #22
 80008b0:	d101      	bne.n	80008b6 <__sflush_r+0xb6>
 80008b2:	602f      	str	r7, [r5, #0]
 80008b4:	e7b1      	b.n	800081a <__sflush_r+0x1a>
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008bc:	81a3      	strh	r3, [r4, #12]
 80008be:	e7ad      	b.n	800081c <__sflush_r+0x1c>
 80008c0:	690f      	ldr	r7, [r1, #16]
 80008c2:	2f00      	cmp	r7, #0
 80008c4:	d0a9      	beq.n	800081a <__sflush_r+0x1a>
 80008c6:	0793      	lsls	r3, r2, #30
 80008c8:	680e      	ldr	r6, [r1, #0]
 80008ca:	bf08      	it	eq
 80008cc:	694b      	ldreq	r3, [r1, #20]
 80008ce:	600f      	str	r7, [r1, #0]
 80008d0:	bf18      	it	ne
 80008d2:	2300      	movne	r3, #0
 80008d4:	eba6 0807 	sub.w	r8, r6, r7
 80008d8:	608b      	str	r3, [r1, #8]
 80008da:	f1b8 0f00 	cmp.w	r8, #0
 80008de:	dd9c      	ble.n	800081a <__sflush_r+0x1a>
 80008e0:	6a21      	ldr	r1, [r4, #32]
 80008e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008e4:	4643      	mov	r3, r8
 80008e6:	463a      	mov	r2, r7
 80008e8:	4628      	mov	r0, r5
 80008ea:	47b0      	blx	r6
 80008ec:	2800      	cmp	r0, #0
 80008ee:	dc06      	bgt.n	80008fe <__sflush_r+0xfe>
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f6:	81a3      	strh	r3, [r4, #12]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	e78e      	b.n	800081c <__sflush_r+0x1c>
 80008fe:	4407      	add	r7, r0
 8000900:	eba8 0800 	sub.w	r8, r8, r0
 8000904:	e7e9      	b.n	80008da <__sflush_r+0xda>
 8000906:	bf00      	nop
 8000908:	20400001 	.word	0x20400001

0800090c <_fflush_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	690b      	ldr	r3, [r1, #16]
 8000910:	4605      	mov	r5, r0
 8000912:	460c      	mov	r4, r1
 8000914:	b913      	cbnz	r3, 800091c <_fflush_r+0x10>
 8000916:	2500      	movs	r5, #0
 8000918:	4628      	mov	r0, r5
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	b118      	cbz	r0, 8000926 <_fflush_r+0x1a>
 800091e:	6983      	ldr	r3, [r0, #24]
 8000920:	b90b      	cbnz	r3, 8000926 <_fflush_r+0x1a>
 8000922:	f000 f887 	bl	8000a34 <__sinit>
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <_fflush_r+0x6c>)
 8000928:	429c      	cmp	r4, r3
 800092a:	d11b      	bne.n	8000964 <_fflush_r+0x58>
 800092c:	686c      	ldr	r4, [r5, #4]
 800092e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0ef      	beq.n	8000916 <_fflush_r+0xa>
 8000936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000938:	07d0      	lsls	r0, r2, #31
 800093a:	d404      	bmi.n	8000946 <_fflush_r+0x3a>
 800093c:	0599      	lsls	r1, r3, #22
 800093e:	d402      	bmi.n	8000946 <_fflush_r+0x3a>
 8000940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000942:	f000 f915 	bl	8000b70 <__retarget_lock_acquire_recursive>
 8000946:	4628      	mov	r0, r5
 8000948:	4621      	mov	r1, r4
 800094a:	f7ff ff59 	bl	8000800 <__sflush_r>
 800094e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000950:	07da      	lsls	r2, r3, #31
 8000952:	4605      	mov	r5, r0
 8000954:	d4e0      	bmi.n	8000918 <_fflush_r+0xc>
 8000956:	89a3      	ldrh	r3, [r4, #12]
 8000958:	059b      	lsls	r3, r3, #22
 800095a:	d4dd      	bmi.n	8000918 <_fflush_r+0xc>
 800095c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800095e:	f000 f908 	bl	8000b72 <__retarget_lock_release_recursive>
 8000962:	e7d9      	b.n	8000918 <_fflush_r+0xc>
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <_fflush_r+0x70>)
 8000966:	429c      	cmp	r4, r3
 8000968:	d101      	bne.n	800096e <_fflush_r+0x62>
 800096a:	68ac      	ldr	r4, [r5, #8]
 800096c:	e7df      	b.n	800092e <_fflush_r+0x22>
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <_fflush_r+0x74>)
 8000970:	429c      	cmp	r4, r3
 8000972:	bf08      	it	eq
 8000974:	68ec      	ldreq	r4, [r5, #12]
 8000976:	e7da      	b.n	800092e <_fflush_r+0x22>
 8000978:	08000fdc 	.word	0x08000fdc
 800097c:	08000ffc 	.word	0x08000ffc
 8000980:	08000fbc 	.word	0x08000fbc

08000984 <std>:
 8000984:	2300      	movs	r3, #0
 8000986:	b510      	push	{r4, lr}
 8000988:	4604      	mov	r4, r0
 800098a:	e9c0 3300 	strd	r3, r3, [r0]
 800098e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000992:	6083      	str	r3, [r0, #8]
 8000994:	8181      	strh	r1, [r0, #12]
 8000996:	6643      	str	r3, [r0, #100]	; 0x64
 8000998:	81c2      	strh	r2, [r0, #14]
 800099a:	6183      	str	r3, [r0, #24]
 800099c:	4619      	mov	r1, r3
 800099e:	2208      	movs	r2, #8
 80009a0:	305c      	adds	r0, #92	; 0x5c
 80009a2:	f7ff fdef 	bl	8000584 <memset>
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <std+0x38>)
 80009a8:	6263      	str	r3, [r4, #36]	; 0x24
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <std+0x3c>)
 80009ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <std+0x40>)
 80009b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <std+0x44>)
 80009b4:	6224      	str	r4, [r4, #32]
 80009b6:	6323      	str	r3, [r4, #48]	; 0x30
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	bf00      	nop
 80009bc:	08000e21 	.word	0x08000e21
 80009c0:	08000e43 	.word	0x08000e43
 80009c4:	08000e7b 	.word	0x08000e7b
 80009c8:	08000e9f 	.word	0x08000e9f

080009cc <_cleanup_r>:
 80009cc:	4901      	ldr	r1, [pc, #4]	; (80009d4 <_cleanup_r+0x8>)
 80009ce:	f000 b8af 	b.w	8000b30 <_fwalk_reent>
 80009d2:	bf00      	nop
 80009d4:	0800090d 	.word	0x0800090d

080009d8 <__sfmoreglue>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	2268      	movs	r2, #104	; 0x68
 80009dc:	1e4d      	subs	r5, r1, #1
 80009de:	4355      	muls	r5, r2
 80009e0:	460e      	mov	r6, r1
 80009e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009e6:	f000 f997 	bl	8000d18 <_malloc_r>
 80009ea:	4604      	mov	r4, r0
 80009ec:	b140      	cbz	r0, 8000a00 <__sfmoreglue+0x28>
 80009ee:	2100      	movs	r1, #0
 80009f0:	e9c0 1600 	strd	r1, r6, [r0]
 80009f4:	300c      	adds	r0, #12
 80009f6:	60a0      	str	r0, [r4, #8]
 80009f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009fc:	f7ff fdc2 	bl	8000584 <memset>
 8000a00:	4620      	mov	r0, r4
 8000a02:	bd70      	pop	{r4, r5, r6, pc}

08000a04 <__sfp_lock_acquire>:
 8000a04:	4801      	ldr	r0, [pc, #4]	; (8000a0c <__sfp_lock_acquire+0x8>)
 8000a06:	f000 b8b3 	b.w	8000b70 <__retarget_lock_acquire_recursive>
 8000a0a:	bf00      	nop
 8000a0c:	20000085 	.word	0x20000085

08000a10 <__sfp_lock_release>:
 8000a10:	4801      	ldr	r0, [pc, #4]	; (8000a18 <__sfp_lock_release+0x8>)
 8000a12:	f000 b8ae 	b.w	8000b72 <__retarget_lock_release_recursive>
 8000a16:	bf00      	nop
 8000a18:	20000085 	.word	0x20000085

08000a1c <__sinit_lock_acquire>:
 8000a1c:	4801      	ldr	r0, [pc, #4]	; (8000a24 <__sinit_lock_acquire+0x8>)
 8000a1e:	f000 b8a7 	b.w	8000b70 <__retarget_lock_acquire_recursive>
 8000a22:	bf00      	nop
 8000a24:	20000086 	.word	0x20000086

08000a28 <__sinit_lock_release>:
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <__sinit_lock_release+0x8>)
 8000a2a:	f000 b8a2 	b.w	8000b72 <__retarget_lock_release_recursive>
 8000a2e:	bf00      	nop
 8000a30:	20000086 	.word	0x20000086

08000a34 <__sinit>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4604      	mov	r4, r0
 8000a38:	f7ff fff0 	bl	8000a1c <__sinit_lock_acquire>
 8000a3c:	69a3      	ldr	r3, [r4, #24]
 8000a3e:	b11b      	cbz	r3, 8000a48 <__sinit+0x14>
 8000a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a44:	f7ff bff0 	b.w	8000a28 <__sinit_lock_release>
 8000a48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a4c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <__sinit+0x68>)
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <__sinit+0x6c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a56:	42a3      	cmp	r3, r4
 8000a58:	bf04      	itt	eq
 8000a5a:	2301      	moveq	r3, #1
 8000a5c:	61a3      	streq	r3, [r4, #24]
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f000 f820 	bl	8000aa4 <__sfp>
 8000a64:	6060      	str	r0, [r4, #4]
 8000a66:	4620      	mov	r0, r4
 8000a68:	f000 f81c 	bl	8000aa4 <__sfp>
 8000a6c:	60a0      	str	r0, [r4, #8]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f000 f818 	bl	8000aa4 <__sfp>
 8000a74:	2200      	movs	r2, #0
 8000a76:	60e0      	str	r0, [r4, #12]
 8000a78:	2104      	movs	r1, #4
 8000a7a:	6860      	ldr	r0, [r4, #4]
 8000a7c:	f7ff ff82 	bl	8000984 <std>
 8000a80:	68a0      	ldr	r0, [r4, #8]
 8000a82:	2201      	movs	r2, #1
 8000a84:	2109      	movs	r1, #9
 8000a86:	f7ff ff7d 	bl	8000984 <std>
 8000a8a:	68e0      	ldr	r0, [r4, #12]
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	2112      	movs	r1, #18
 8000a90:	f7ff ff78 	bl	8000984 <std>
 8000a94:	2301      	movs	r3, #1
 8000a96:	61a3      	str	r3, [r4, #24]
 8000a98:	e7d2      	b.n	8000a40 <__sinit+0xc>
 8000a9a:	bf00      	nop
 8000a9c:	08000fb8 	.word	0x08000fb8
 8000aa0:	080009cd 	.word	0x080009cd

08000aa4 <__sfp>:
 8000aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa6:	4607      	mov	r7, r0
 8000aa8:	f7ff ffac 	bl	8000a04 <__sfp_lock_acquire>
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <__sfp+0x84>)
 8000aae:	681e      	ldr	r6, [r3, #0]
 8000ab0:	69b3      	ldr	r3, [r6, #24]
 8000ab2:	b913      	cbnz	r3, 8000aba <__sfp+0x16>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	f7ff ffbd 	bl	8000a34 <__sinit>
 8000aba:	3648      	adds	r6, #72	; 0x48
 8000abc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	d503      	bpl.n	8000acc <__sfp+0x28>
 8000ac4:	6833      	ldr	r3, [r6, #0]
 8000ac6:	b30b      	cbz	r3, 8000b0c <__sfp+0x68>
 8000ac8:	6836      	ldr	r6, [r6, #0]
 8000aca:	e7f7      	b.n	8000abc <__sfp+0x18>
 8000acc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ad0:	b9d5      	cbnz	r5, 8000b08 <__sfp+0x64>
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <__sfp+0x88>)
 8000ad4:	60e3      	str	r3, [r4, #12]
 8000ad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ada:	6665      	str	r5, [r4, #100]	; 0x64
 8000adc:	f000 f847 	bl	8000b6e <__retarget_lock_init_recursive>
 8000ae0:	f7ff ff96 	bl	8000a10 <__sfp_lock_release>
 8000ae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000aec:	6025      	str	r5, [r4, #0]
 8000aee:	61a5      	str	r5, [r4, #24]
 8000af0:	2208      	movs	r2, #8
 8000af2:	4629      	mov	r1, r5
 8000af4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000af8:	f7ff fd44 	bl	8000584 <memset>
 8000afc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b04:	4620      	mov	r0, r4
 8000b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b08:	3468      	adds	r4, #104	; 0x68
 8000b0a:	e7d9      	b.n	8000ac0 <__sfp+0x1c>
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4638      	mov	r0, r7
 8000b10:	f7ff ff62 	bl	80009d8 <__sfmoreglue>
 8000b14:	4604      	mov	r4, r0
 8000b16:	6030      	str	r0, [r6, #0]
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1d5      	bne.n	8000ac8 <__sfp+0x24>
 8000b1c:	f7ff ff78 	bl	8000a10 <__sfp_lock_release>
 8000b20:	230c      	movs	r3, #12
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	e7ee      	b.n	8000b04 <__sfp+0x60>
 8000b26:	bf00      	nop
 8000b28:	08000fb8 	.word	0x08000fb8
 8000b2c:	ffff0001 	.word	0xffff0001

08000b30 <_fwalk_reent>:
 8000b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b34:	4606      	mov	r6, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b42:	f1b9 0901 	subs.w	r9, r9, #1
 8000b46:	d505      	bpl.n	8000b54 <_fwalk_reent+0x24>
 8000b48:	6824      	ldr	r4, [r4, #0]
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d1f7      	bne.n	8000b3e <_fwalk_reent+0xe>
 8000b4e:	4638      	mov	r0, r7
 8000b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b54:	89ab      	ldrh	r3, [r5, #12]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d907      	bls.n	8000b6a <_fwalk_reent+0x3a>
 8000b5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	d003      	beq.n	8000b6a <_fwalk_reent+0x3a>
 8000b62:	4629      	mov	r1, r5
 8000b64:	4630      	mov	r0, r6
 8000b66:	47c0      	blx	r8
 8000b68:	4307      	orrs	r7, r0
 8000b6a:	3568      	adds	r5, #104	; 0x68
 8000b6c:	e7e9      	b.n	8000b42 <_fwalk_reent+0x12>

08000b6e <__retarget_lock_init_recursive>:
 8000b6e:	4770      	bx	lr

08000b70 <__retarget_lock_acquire_recursive>:
 8000b70:	4770      	bx	lr

08000b72 <__retarget_lock_release_recursive>:
 8000b72:	4770      	bx	lr

08000b74 <__swhatbuf_r>:
 8000b74:	b570      	push	{r4, r5, r6, lr}
 8000b76:	460e      	mov	r6, r1
 8000b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	b096      	sub	sp, #88	; 0x58
 8000b80:	4614      	mov	r4, r2
 8000b82:	461d      	mov	r5, r3
 8000b84:	da08      	bge.n	8000b98 <__swhatbuf_r+0x24>
 8000b86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	602a      	str	r2, [r5, #0]
 8000b8e:	061a      	lsls	r2, r3, #24
 8000b90:	d410      	bmi.n	8000bb4 <__swhatbuf_r+0x40>
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	e00e      	b.n	8000bb6 <__swhatbuf_r+0x42>
 8000b98:	466a      	mov	r2, sp
 8000b9a:	f000 f9a7 	bl	8000eec <_fstat_r>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	dbf1      	blt.n	8000b86 <__swhatbuf_r+0x12>
 8000ba2:	9a01      	ldr	r2, [sp, #4]
 8000ba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000bac:	425a      	negs	r2, r3
 8000bae:	415a      	adcs	r2, r3
 8000bb0:	602a      	str	r2, [r5, #0]
 8000bb2:	e7ee      	b.n	8000b92 <__swhatbuf_r+0x1e>
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	6023      	str	r3, [r4, #0]
 8000bba:	b016      	add	sp, #88	; 0x58
 8000bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000bc0 <__smakebuf_r>:
 8000bc0:	898b      	ldrh	r3, [r1, #12]
 8000bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000bc4:	079d      	lsls	r5, r3, #30
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	460c      	mov	r4, r1
 8000bca:	d507      	bpl.n	8000bdc <__smakebuf_r+0x1c>
 8000bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000bd0:	6023      	str	r3, [r4, #0]
 8000bd2:	6123      	str	r3, [r4, #16]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	6163      	str	r3, [r4, #20]
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	ab01      	add	r3, sp, #4
 8000bde:	466a      	mov	r2, sp
 8000be0:	f7ff ffc8 	bl	8000b74 <__swhatbuf_r>
 8000be4:	9900      	ldr	r1, [sp, #0]
 8000be6:	4605      	mov	r5, r0
 8000be8:	4630      	mov	r0, r6
 8000bea:	f000 f895 	bl	8000d18 <_malloc_r>
 8000bee:	b948      	cbnz	r0, 8000c04 <__smakebuf_r+0x44>
 8000bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf4:	059a      	lsls	r2, r3, #22
 8000bf6:	d4ef      	bmi.n	8000bd8 <__smakebuf_r+0x18>
 8000bf8:	f023 0303 	bic.w	r3, r3, #3
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	81a3      	strh	r3, [r4, #12]
 8000c02:	e7e3      	b.n	8000bcc <__smakebuf_r+0xc>
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <__smakebuf_r+0x7c>)
 8000c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c08:	89a3      	ldrh	r3, [r4, #12]
 8000c0a:	6020      	str	r0, [r4, #0]
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	81a3      	strh	r3, [r4, #12]
 8000c12:	9b00      	ldr	r3, [sp, #0]
 8000c14:	6163      	str	r3, [r4, #20]
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	6120      	str	r0, [r4, #16]
 8000c1a:	b15b      	cbz	r3, 8000c34 <__smakebuf_r+0x74>
 8000c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c20:	4630      	mov	r0, r6
 8000c22:	f000 f975 	bl	8000f10 <_isatty_r>
 8000c26:	b128      	cbz	r0, 8000c34 <__smakebuf_r+0x74>
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f023 0303 	bic.w	r3, r3, #3
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	81a3      	strh	r3, [r4, #12]
 8000c34:	89a0      	ldrh	r0, [r4, #12]
 8000c36:	4305      	orrs	r5, r0
 8000c38:	81a5      	strh	r5, [r4, #12]
 8000c3a:	e7cd      	b.n	8000bd8 <__smakebuf_r+0x18>
 8000c3c:	080009cd 	.word	0x080009cd

08000c40 <_free_r>:
 8000c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d044      	beq.n	8000cd0 <_free_r+0x90>
 8000c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c4a:	9001      	str	r0, [sp, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8000c52:	bfb8      	it	lt
 8000c54:	18e4      	addlt	r4, r4, r3
 8000c56:	f000 f97d 	bl	8000f54 <__malloc_lock>
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <_free_r+0x94>)
 8000c5c:	9801      	ldr	r0, [sp, #4]
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	b933      	cbnz	r3, 8000c70 <_free_r+0x30>
 8000c62:	6063      	str	r3, [r4, #4]
 8000c64:	6014      	str	r4, [r2, #0]
 8000c66:	b003      	add	sp, #12
 8000c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c6c:	f000 b978 	b.w	8000f60 <__malloc_unlock>
 8000c70:	42a3      	cmp	r3, r4
 8000c72:	d908      	bls.n	8000c86 <_free_r+0x46>
 8000c74:	6825      	ldr	r5, [r4, #0]
 8000c76:	1961      	adds	r1, r4, r5
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	bf01      	itttt	eq
 8000c7c:	6819      	ldreq	r1, [r3, #0]
 8000c7e:	685b      	ldreq	r3, [r3, #4]
 8000c80:	1949      	addeq	r1, r1, r5
 8000c82:	6021      	streq	r1, [r4, #0]
 8000c84:	e7ed      	b.n	8000c62 <_free_r+0x22>
 8000c86:	461a      	mov	r2, r3
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b10b      	cbz	r3, 8000c90 <_free_r+0x50>
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d9fa      	bls.n	8000c86 <_free_r+0x46>
 8000c90:	6811      	ldr	r1, [r2, #0]
 8000c92:	1855      	adds	r5, r2, r1
 8000c94:	42a5      	cmp	r5, r4
 8000c96:	d10b      	bne.n	8000cb0 <_free_r+0x70>
 8000c98:	6824      	ldr	r4, [r4, #0]
 8000c9a:	4421      	add	r1, r4
 8000c9c:	1854      	adds	r4, r2, r1
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	6011      	str	r1, [r2, #0]
 8000ca2:	d1e0      	bne.n	8000c66 <_free_r+0x26>
 8000ca4:	681c      	ldr	r4, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	6053      	str	r3, [r2, #4]
 8000caa:	4421      	add	r1, r4
 8000cac:	6011      	str	r1, [r2, #0]
 8000cae:	e7da      	b.n	8000c66 <_free_r+0x26>
 8000cb0:	d902      	bls.n	8000cb8 <_free_r+0x78>
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	6003      	str	r3, [r0, #0]
 8000cb6:	e7d6      	b.n	8000c66 <_free_r+0x26>
 8000cb8:	6825      	ldr	r5, [r4, #0]
 8000cba:	1961      	adds	r1, r4, r5
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	bf04      	itt	eq
 8000cc0:	6819      	ldreq	r1, [r3, #0]
 8000cc2:	685b      	ldreq	r3, [r3, #4]
 8000cc4:	6063      	str	r3, [r4, #4]
 8000cc6:	bf04      	itt	eq
 8000cc8:	1949      	addeq	r1, r1, r5
 8000cca:	6021      	streq	r1, [r4, #0]
 8000ccc:	6054      	str	r4, [r2, #4]
 8000cce:	e7ca      	b.n	8000c66 <_free_r+0x26>
 8000cd0:	b003      	add	sp, #12
 8000cd2:	bd30      	pop	{r4, r5, pc}
 8000cd4:	20000088 	.word	0x20000088

08000cd8 <sbrk_aligned>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	4e0e      	ldr	r6, [pc, #56]	; (8000d14 <sbrk_aligned+0x3c>)
 8000cdc:	460c      	mov	r4, r1
 8000cde:	6831      	ldr	r1, [r6, #0]
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	b911      	cbnz	r1, 8000cea <sbrk_aligned+0x12>
 8000ce4:	f000 f88c 	bl	8000e00 <_sbrk_r>
 8000ce8:	6030      	str	r0, [r6, #0]
 8000cea:	4621      	mov	r1, r4
 8000cec:	4628      	mov	r0, r5
 8000cee:	f000 f887 	bl	8000e00 <_sbrk_r>
 8000cf2:	1c43      	adds	r3, r0, #1
 8000cf4:	d00a      	beq.n	8000d0c <sbrk_aligned+0x34>
 8000cf6:	1cc4      	adds	r4, r0, #3
 8000cf8:	f024 0403 	bic.w	r4, r4, #3
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d007      	beq.n	8000d10 <sbrk_aligned+0x38>
 8000d00:	1a21      	subs	r1, r4, r0
 8000d02:	4628      	mov	r0, r5
 8000d04:	f000 f87c 	bl	8000e00 <_sbrk_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d101      	bne.n	8000d10 <sbrk_aligned+0x38>
 8000d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8000d10:	4620      	mov	r0, r4
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	2000008c 	.word	0x2000008c

08000d18 <_malloc_r>:
 8000d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1c:	1ccd      	adds	r5, r1, #3
 8000d1e:	f025 0503 	bic.w	r5, r5, #3
 8000d22:	3508      	adds	r5, #8
 8000d24:	2d0c      	cmp	r5, #12
 8000d26:	bf38      	it	cc
 8000d28:	250c      	movcc	r5, #12
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	4607      	mov	r7, r0
 8000d2e:	db01      	blt.n	8000d34 <_malloc_r+0x1c>
 8000d30:	42a9      	cmp	r1, r5
 8000d32:	d905      	bls.n	8000d40 <_malloc_r+0x28>
 8000d34:	230c      	movs	r3, #12
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	2600      	movs	r6, #0
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d40:	4e2e      	ldr	r6, [pc, #184]	; (8000dfc <_malloc_r+0xe4>)
 8000d42:	f000 f907 	bl	8000f54 <__malloc_lock>
 8000d46:	6833      	ldr	r3, [r6, #0]
 8000d48:	461c      	mov	r4, r3
 8000d4a:	bb34      	cbnz	r4, 8000d9a <_malloc_r+0x82>
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4638      	mov	r0, r7
 8000d50:	f7ff ffc2 	bl	8000cd8 <sbrk_aligned>
 8000d54:	1c43      	adds	r3, r0, #1
 8000d56:	4604      	mov	r4, r0
 8000d58:	d14d      	bne.n	8000df6 <_malloc_r+0xde>
 8000d5a:	6834      	ldr	r4, [r6, #0]
 8000d5c:	4626      	mov	r6, r4
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d140      	bne.n	8000de4 <_malloc_r+0xcc>
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	4631      	mov	r1, r6
 8000d66:	4638      	mov	r0, r7
 8000d68:	eb04 0803 	add.w	r8, r4, r3
 8000d6c:	f000 f848 	bl	8000e00 <_sbrk_r>
 8000d70:	4580      	cmp	r8, r0
 8000d72:	d13a      	bne.n	8000dea <_malloc_r+0xd2>
 8000d74:	6821      	ldr	r1, [r4, #0]
 8000d76:	3503      	adds	r5, #3
 8000d78:	1a6d      	subs	r5, r5, r1
 8000d7a:	f025 0503 	bic.w	r5, r5, #3
 8000d7e:	3508      	adds	r5, #8
 8000d80:	2d0c      	cmp	r5, #12
 8000d82:	bf38      	it	cc
 8000d84:	250c      	movcc	r5, #12
 8000d86:	4629      	mov	r1, r5
 8000d88:	4638      	mov	r0, r7
 8000d8a:	f7ff ffa5 	bl	8000cd8 <sbrk_aligned>
 8000d8e:	3001      	adds	r0, #1
 8000d90:	d02b      	beq.n	8000dea <_malloc_r+0xd2>
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	442b      	add	r3, r5
 8000d96:	6023      	str	r3, [r4, #0]
 8000d98:	e00e      	b.n	8000db8 <_malloc_r+0xa0>
 8000d9a:	6822      	ldr	r2, [r4, #0]
 8000d9c:	1b52      	subs	r2, r2, r5
 8000d9e:	d41e      	bmi.n	8000dde <_malloc_r+0xc6>
 8000da0:	2a0b      	cmp	r2, #11
 8000da2:	d916      	bls.n	8000dd2 <_malloc_r+0xba>
 8000da4:	1961      	adds	r1, r4, r5
 8000da6:	42a3      	cmp	r3, r4
 8000da8:	6025      	str	r5, [r4, #0]
 8000daa:	bf18      	it	ne
 8000dac:	6059      	strne	r1, [r3, #4]
 8000dae:	6863      	ldr	r3, [r4, #4]
 8000db0:	bf08      	it	eq
 8000db2:	6031      	streq	r1, [r6, #0]
 8000db4:	5162      	str	r2, [r4, r5]
 8000db6:	604b      	str	r3, [r1, #4]
 8000db8:	4638      	mov	r0, r7
 8000dba:	f104 060b 	add.w	r6, r4, #11
 8000dbe:	f000 f8cf 	bl	8000f60 <__malloc_unlock>
 8000dc2:	f026 0607 	bic.w	r6, r6, #7
 8000dc6:	1d23      	adds	r3, r4, #4
 8000dc8:	1af2      	subs	r2, r6, r3
 8000dca:	d0b6      	beq.n	8000d3a <_malloc_r+0x22>
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	50a3      	str	r3, [r4, r2]
 8000dd0:	e7b3      	b.n	8000d3a <_malloc_r+0x22>
 8000dd2:	6862      	ldr	r2, [r4, #4]
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	bf0c      	ite	eq
 8000dd8:	6032      	streq	r2, [r6, #0]
 8000dda:	605a      	strne	r2, [r3, #4]
 8000ddc:	e7ec      	b.n	8000db8 <_malloc_r+0xa0>
 8000dde:	4623      	mov	r3, r4
 8000de0:	6864      	ldr	r4, [r4, #4]
 8000de2:	e7b2      	b.n	8000d4a <_malloc_r+0x32>
 8000de4:	4634      	mov	r4, r6
 8000de6:	6876      	ldr	r6, [r6, #4]
 8000de8:	e7b9      	b.n	8000d5e <_malloc_r+0x46>
 8000dea:	230c      	movs	r3, #12
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4638      	mov	r0, r7
 8000df0:	f000 f8b6 	bl	8000f60 <__malloc_unlock>
 8000df4:	e7a1      	b.n	8000d3a <_malloc_r+0x22>
 8000df6:	6025      	str	r5, [r4, #0]
 8000df8:	e7de      	b.n	8000db8 <_malloc_r+0xa0>
 8000dfa:	bf00      	nop
 8000dfc:	20000088 	.word	0x20000088

08000e00 <_sbrk_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d06      	ldr	r5, [pc, #24]	; (8000e1c <_sbrk_r+0x1c>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	602b      	str	r3, [r5, #0]
 8000e0c:	f7ff fa6c 	bl	80002e8 <_sbrk>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_sbrk_r+0x1a>
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_sbrk_r+0x1a>
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	20000090 	.word	0x20000090

08000e20 <__sread>:
 8000e20:	b510      	push	{r4, lr}
 8000e22:	460c      	mov	r4, r1
 8000e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e28:	f000 f8a0 	bl	8000f6c <_read_r>
 8000e2c:	2800      	cmp	r0, #0
 8000e2e:	bfab      	itete	ge
 8000e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e32:	89a3      	ldrhlt	r3, [r4, #12]
 8000e34:	181b      	addge	r3, r3, r0
 8000e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e3a:	bfac      	ite	ge
 8000e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e3e:	81a3      	strhlt	r3, [r4, #12]
 8000e40:	bd10      	pop	{r4, pc}

08000e42 <__swrite>:
 8000e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e46:	461f      	mov	r7, r3
 8000e48:	898b      	ldrh	r3, [r1, #12]
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	4605      	mov	r5, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4616      	mov	r6, r2
 8000e52:	d505      	bpl.n	8000e60 <__swrite+0x1e>
 8000e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f000 f868 	bl	8000f30 <_lseek_r>
 8000e60:	89a3      	ldrh	r3, [r4, #12]
 8000e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e6a:	81a3      	strh	r3, [r4, #12]
 8000e6c:	4632      	mov	r2, r6
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4628      	mov	r0, r5
 8000e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e76:	f000 b817 	b.w	8000ea8 <_write_r>

08000e7a <__sseek>:
 8000e7a:	b510      	push	{r4, lr}
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e82:	f000 f855 	bl	8000f30 <_lseek_r>
 8000e86:	1c43      	adds	r3, r0, #1
 8000e88:	89a3      	ldrh	r3, [r4, #12]
 8000e8a:	bf15      	itete	ne
 8000e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000e96:	81a3      	strheq	r3, [r4, #12]
 8000e98:	bf18      	it	ne
 8000e9a:	81a3      	strhne	r3, [r4, #12]
 8000e9c:	bd10      	pop	{r4, pc}

08000e9e <__sclose>:
 8000e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea2:	f000 b813 	b.w	8000ecc <_close_r>
	...

08000ea8 <_write_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4d07      	ldr	r5, [pc, #28]	; (8000ec8 <_write_r+0x20>)
 8000eac:	4604      	mov	r4, r0
 8000eae:	4608      	mov	r0, r1
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	602a      	str	r2, [r5, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f7ff f9c5 	bl	8000246 <_write>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_write_r+0x1e>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_write_r+0x1e>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	20000090 	.word	0x20000090

08000ecc <_close_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d06      	ldr	r5, [pc, #24]	; (8000ee8 <_close_r+0x1c>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	f7ff f9d1 	bl	800027e <_close>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_close_r+0x1a>
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_close_r+0x1a>
 8000ee4:	6023      	str	r3, [r4, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	20000090 	.word	0x20000090

08000eec <_fstat_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d07      	ldr	r5, [pc, #28]	; (8000f0c <_fstat_r+0x20>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	602b      	str	r3, [r5, #0]
 8000efa:	f7ff f9cc 	bl	8000296 <_fstat>
 8000efe:	1c43      	adds	r3, r0, #1
 8000f00:	d102      	bne.n	8000f08 <_fstat_r+0x1c>
 8000f02:	682b      	ldr	r3, [r5, #0]
 8000f04:	b103      	cbz	r3, 8000f08 <_fstat_r+0x1c>
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	bd38      	pop	{r3, r4, r5, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000090 	.word	0x20000090

08000f10 <_isatty_r>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4d06      	ldr	r5, [pc, #24]	; (8000f2c <_isatty_r+0x1c>)
 8000f14:	2300      	movs	r3, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	602b      	str	r3, [r5, #0]
 8000f1c:	f7ff f9cb 	bl	80002b6 <_isatty>
 8000f20:	1c43      	adds	r3, r0, #1
 8000f22:	d102      	bne.n	8000f2a <_isatty_r+0x1a>
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	b103      	cbz	r3, 8000f2a <_isatty_r+0x1a>
 8000f28:	6023      	str	r3, [r4, #0]
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000090 	.word	0x20000090

08000f30 <_lseek_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d07      	ldr	r5, [pc, #28]	; (8000f50 <_lseek_r+0x20>)
 8000f34:	4604      	mov	r4, r0
 8000f36:	4608      	mov	r0, r1
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	602a      	str	r2, [r5, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f7ff f9c4 	bl	80002cc <_lseek>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_lseek_r+0x1e>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_lseek_r+0x1e>
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	20000090 	.word	0x20000090

08000f54 <__malloc_lock>:
 8000f54:	4801      	ldr	r0, [pc, #4]	; (8000f5c <__malloc_lock+0x8>)
 8000f56:	f7ff be0b 	b.w	8000b70 <__retarget_lock_acquire_recursive>
 8000f5a:	bf00      	nop
 8000f5c:	20000084 	.word	0x20000084

08000f60 <__malloc_unlock>:
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <__malloc_unlock+0x8>)
 8000f62:	f7ff be06 	b.w	8000b72 <__retarget_lock_release_recursive>
 8000f66:	bf00      	nop
 8000f68:	20000084 	.word	0x20000084

08000f6c <_read_r>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4d07      	ldr	r5, [pc, #28]	; (8000f8c <_read_r+0x20>)
 8000f70:	4604      	mov	r4, r0
 8000f72:	4608      	mov	r0, r1
 8000f74:	4611      	mov	r1, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	602a      	str	r2, [r5, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f7ff f946 	bl	800020c <_read>
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d102      	bne.n	8000f8a <_read_r+0x1e>
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	b103      	cbz	r3, 8000f8a <_read_r+0x1e>
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000090 	.word	0x20000090

08000f90 <_init>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr

08000f9c <_fini>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr
